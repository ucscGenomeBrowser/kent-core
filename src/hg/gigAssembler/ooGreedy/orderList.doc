This is some code that runs but needs still a little
something before it actually improves program.  It
was in ooGreedy 81.

#ifdef MAYBE_WORSE_THAN_NOTHING

/* The "ord" family of routines all support the "orderRafts" routine.
 * Might be worth breaking this program into a couple of files
 * some day.  Hah! */

struct dlNode *ordDlNode(struct dlList *freeNodes, void *val)
/* Return a dlNode initialized with val pointer from freeNodes if
 * possible. */
{
struct dlNode *node;
if ((node = dlPopHead(freeNodes)) == NULL)
    AllocVar(node);
node->val = val;
return node;
}

boolean ordAnyRealParents(struct dgNode *vertex)
/* Return TRUE if vertex has any parents with values. */
{
struct dgConnection *conn;

for (conn = vertex->prevList; conn != NULL; conn = conn->next)
    {
    if (conn->node->val != NULL)
        return TRUE;
    }
return FALSE;
}

void ordAddParentlessNodes(struct diGraph *graph, struct dlList *list)
/* Add parentless vertices to list. */
{
struct dgNode *dgNode;
for (dgNode = graph->nodeList; dgNode != NULL; dgNode = dgNode->next)
    {
    if (dgNode->val != NULL && !ordAnyRealParents(dgNode))
        {
	dlAddValTail(list, dgNode);
	}
    }
}

int ordCountEnds(struct dgNode *raftNode, struct dlList *cloneList)
/* Count up number of clones in cloneList that are not represented in
 * raft. */
{
struct raft *raft = raftNode->val;
struct dlNode *cloneNode;
int count = 0;
struct oogClone *clone;

for (cloneNode = cloneList->head; cloneNode->next != NULL; cloneNode = cloneNode->next)
    {
    clone = cloneNode->val;
    if (!cloneInRaft(cloneNode->val, raft))
       ++count;
    }
return count;
}

int ordCountStarts(struct dgNode *raftNode, struct dlList *cloneList)
/* Count up number of clones in raft that are not represented in
 * cloneList. */
{
struct hash *hash = newHash(6);
struct raft *raft = raftNode->val;
struct raftFrag *rf;
struct oogClone *clone;
int count = 0;

for (rf = raft->fragList; rf != NULL; rf = rf->next)
    {
    clone = rf->frag->clone;
    if (!hashLookup(hash, clone->name))
        {
	hashAdd(hash, clone->name, clone);
	if (!dlValInList(cloneList, clone))
	    ++count;
	}
    }
freeHash(&hash);
return count;
}

int ordCountStartsOrEnds(struct dgNode *raftNode, struct dlList *cloneList, 
    boolean countEnds)
/* Return new starts or new ends depending on countEnds boolean. */
{
if (countEnds)
    return ordCountEnds(raftNode, cloneList);
else
    return ordCountStarts(raftNode, cloneList);
}

boolean ordFindStartsOrEnds(struct dlList *source, struct dlList *dest, 
    struct dlList *curCloneList, struct dlList *freeNodes, boolean countEnds)
/* Make dest list of all nodes which start or end the least number of clones. */
{
int minCount = BIGNUM, oneCount;
struct dlNode *sourceNode, *destNode;
boolean gotAny = FALSE;

/* Figure out minimum number of ends. */
for (sourceNode = source->head; !dlEnd(sourceNode);  sourceNode = sourceNode->next)
    {
    oneCount = ordCountStartsOrEnds(sourceNode->val, curCloneList, countEnds);
    if (oneCount <  minCount)
        minCount = oneCount;
    }

/* Make list of nodes with min number of ends. */
for (sourceNode = source->head; !dlEnd(sourceNode);  sourceNode = sourceNode->next)
    {
    struct dgNode *vertex = sourceNode->val;
    oneCount = ordCountStartsOrEnds(vertex, curCloneList, countEnds);
    if (oneCount ==  minCount)
	{
	destNode = ordDlNode(freeNodes, vertex);
	dlAddTail(dest, destNode);
	gotAny = TRUE;
	}
    }
return gotAny;
}

struct dlNode *ordFirstPriority(struct dlList *vertexList)
/* Return node pointing to vertex with lowest numerical priority. */
{
struct dlNode *node, *firstPrio = NULL;
struct dgNode *vertex;
int minPrio = BIGNUM;
for (node = vertexList->head; !dlEnd(node); node = node->next)
    {
    vertex = node->val;
    if (vertex->priority < minPrio)
	{
        minPrio = vertex->priority;
	firstPrio = node;
	}
    }
return firstPrio;
}

boolean ordFindGoodDistance(struct dlList *source, struct dlList *dest, 
	struct dgNode *preVertex, struct dlList *freeNodes)
/* Find source vertex that immediately follows preVertex and is closest,
 * if any (but exclude BAC end only connections.  
 * This works well enough with current data set, but ideally
 * could be a bit more sophisticated. */
{
struct dlNode *sourceNode, *closestNode = NULL, *destNode;
struct dgNode *vertex;
int closestDistance = BIGNUM;
struct dgEdge *edge;
struct dgConnection *conn;
struct bridge *bridge;
struct cable *cable;
int medDist;
boolean gotAny = FALSE;

for (sourceNode = source->head; !dlEnd(sourceNode); sourceNode = sourceNode->next)
    {
    vertex = sourceNode->val;
    for (conn = preVertex->nextList; conn != NULL; conn = conn->next)
	{
	if (conn->node == vertex)
	    {
	    edge = conn->edgeOnList->val;
	    bridge = edge->val;
	    medDist = (bridge->minDistance + bridge->maxDistance)/2;
	    for (cable = bridge->cableList; cable != NULL; cable = cable->next)
		{
		if (cable->cableType == ctChain || cable->cableType == ctReadPair)
		    {
		    if (medDist < closestDistance)
			{
			closestDistance = medDist;
			closestNode = sourceNode;
			break;
			}
		    }
		}
	    }
	}
    }
if (closestNode != NULL)
    {
    destNode = ordDlNode(freeNodes, closestNode->val);
    dlAddTail(dest, destNode);
    gotAny = TRUE;
    }
return gotAny;
}

void ordMakeCurCloneList(struct raft *raft, struct dlList *curCloneList, 
    struct dlList *freeNodes)
/* Make list of clones that are part of raft. */
{
struct hash *hash = newHash(6);
struct raftFrag *rf;
struct oogClone *clone;
struct dlNode *node;

for (rf = raft->fragList; rf != NULL; rf = rf->next)
    {
    clone = rf->frag->clone;
    if (!hashLookup(hash, clone->name))
        {
	hashAdd(hash, clone->name, clone);
	node = ordDlNode(freeNodes, clone);
	dlAddTail(curCloneList, node);
	}
    }
freeHash(&hash);
}

struct dlNode *ordFindSameVal(struct dlList *list, void *val)
/* Find node on list that has same val as val. */
{
struct dlNode *node;
for (node = list->head; !dlEnd(node); node = node->next)
    {
    if (node->val == val)
        return node;
    }
assert(FALSE);
return NULL;
}

void ordAddNewActives(struct dgNode *vertex, struct dlList *activeList, 
	struct dlList *freeNodes)
/* Add children of vertex to active list if all of their
 * parents have been visited. */
{
struct dlNode *newActive;
struct dgConnection *conn;
struct dgNode *child;

for (conn = vertex->nextList; conn != NULL; conn = conn->next)
    {
    child = conn->node;
    if (child->val && dgParentsAllVisited(child))
        {
	newActive = ordDlNode(freeNodes, child);
	dlAddTail(activeList, newActive);
	}
    }
}

struct dgNodeRef *orderRafts(struct diGraph *graph)
/* Return ref list of ordered raft nodes.  This returns nodes
 * using the following ordering scheme:
 *   1) A node can't be output until all of it's parents are output.
 *   2) If there's a choice of nodes to output, the ones that
 *      don't end a clone will be output first.
 *   3) If there's a node the right distance from the previous node
 *      it will be output.
 *   4) If there's still a choice, the ones that don't start
 *      a clone will be output first. 
 *   5) If there's still a choice the one with the smallest default
 *      coordinate (stored as priority on the graph) will be output.
 */
{
struct dlList *freeNodes = newDlList();    /* Free list of dlNodes for speed. */
struct dlList *activeList = newDlList();  /* List where parents have been output. */
struct dlList *goodEnd = newDlList();      /* List where no unnecessary ends. */
struct dlList *goodDistance = newDlList(); /* List where distance is right. */
struct dlList *goodBegin = newDlList();    /* List where no unnecessary beginnings. */
struct dlList *source;
struct dgNodeRef *orderList = NULL, *orderEl;
struct dlList *curCloneList = newDlList(); /* List of currently open clones. */
struct dlNode *curNode;
struct dgNode *vertex = NULL;


/* Set up visit flags so those on valueless, "scaffold" part
 * of graph are marked as already visited while the rest are
 * clear. */
dgClearVisitFlags(graph);
for (vertex = graph->nodeList; vertex != NULL; vertex = vertex->next)
    {
    if (vertex->val == NULL)
        vertex->visited = TRUE;
    }
ordAddParentlessNodes(graph, activeList);
while (!dlEmpty(activeList))
    {
    /* Find best raft to output next applying filters in succession. */
    source = activeList;
    if (ordFindStartsOrEnds(source, goodEnd, curCloneList, freeNodes, TRUE))
	{
        source = goodEnd;
	}
    if (vertex != NULL)
	{
        if (ordFindGoodDistance(source, goodDistance, vertex, freeNodes))
	    {
	    source = goodDistance;
	    }
	}
    if (ordFindStartsOrEnds(source, goodBegin, curCloneList, freeNodes, FALSE))
	{
        source = goodBegin;
	}
    curNode = ordFirstPriority(source);

    /* Output the raft to output list. */
    AllocVar(orderEl);
    orderEl->node = curNode->val;
    slAddHead(&orderList, orderEl);

    /* Update the current clone list. */
    vertex = curNode->val;
    dlCat(freeNodes, curCloneList);
    ordMakeCurCloneList(vertex->val, curCloneList, freeNodes);

    /* Add children for whom this is the last parent to active list. */
    vertex->visited = TRUE;
    ordAddNewActives(vertex, activeList, freeNodes);

    /* Remove node from active list */
    curNode = ordFindSameVal(activeList, curNode->val);
    dlRemove(curNode);
    dlAddTail(freeNodes, curNode);

    /* Move filter lists to free list. */
    dlCat(freeNodes, goodEnd);
    dlCat(freeNodes, goodDistance);
    dlCat(freeNodes, goodBegin);
    }

/* Free up all processing lists. */
freeDlList(&freeNodes);
freeDlList(&activeList);
freeDlList(&goodEnd);
freeDlList(&goodDistance);
freeDlList(&goodBegin);
freeDlList(&curCloneList);

slReverse(&orderList);
return orderList;
}
#endif /* MAYBE_WORSE_THAN_NOTHING */

