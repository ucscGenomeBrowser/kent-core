This log tracks changes from one version of ooGreedy to another

23 - Changed scoring function for raft-building edges to
     penalize "size changes" during alignments logarithmically
     rather than linearly.
24 - Reworked barge building (and hence "default coordinates"
     so as to avoid self contradictory barges, and use
     biggest overlaps first in assembling barges.
25 - Made ooGreedy tolerate sequence mentioned in info but
     not yet present (again - it used to do this, but lost
     it withthe barge building changes).
       Fixed bug where rejected edges not used to extend
     or merge rafts were still being added to raft edge
     list (with bad consequences for the golden path maker).
26 - Reworked how golden path is taken through rafts.  Currently
     uses two systems - a default one and one for "hard" things.
     I think that it will find it's way through more sequence
     than it used to, but currently it is no longer biased
     to taking stuff from the higher quality sequence.
27 - Fixing bug in 5/ctg12474 raft 14.  This caused by a
     number of problems.  The dgFindPath routine wouldn't
     return a path between the same node (length 1).   It
     was also returning a path from A-B as simply B.  It
     handled longer paths fine.   Also redundant edges
     weren't being added to the raft edge list, giving
     the golden path maker fewer choices.
28 - Modifying "findCrossover" to take the bulk of the
     sequence from the better scoring fragment.  Some
     good testing.
29 - Fixed contradictory redundant edges being added to raft.psl.
30 - Put in a bandaide for rafts that want to get output
     twice.  Real fix would be to rewrite graph traversal!
31 - Increased distance from end of sequence to try to 
     avoid from 50 to 250 on golden path.
32 - Added logic to reconsider edges rejected when merging
     rafts because of long tails if the rafts are later
     merged by another.  This sounds kludgy, but is
     actually theoretically sound.  Consider the case:

     ----------Raft-A-------------
            ---frag-1-------xxxxxx


		            xxxxxx--frag-2------
		       ttttt---------Raft-B-------- 

     
     Where frag-1 and frag-2 are aligned at xxxxx.  Though Rafts
     A and B overlap, we don't know that yet.  The part marked
     ttttt is a tail based on this alignment.  However it may
     be that tttt is in fact compatible with Raft-A.  This is
     difficult to check directly.  However if it is true then
     some later alignment should join the fragment containing
     tttt with raft-A.  There's no problem deferring the merging
     of the rafts until this tail-less alignment happens.
     Well, there is a problem if we throw away the edge that
     connects frag-1 and frag-2 at xxxx.  The easiest fix for
     this was to put edges that fail to merge on a list, and
     then after all other edges were processed to reconsider
     them, and add them back to the merged raft AB if appropriate.
33 - In the situation where three fragments A,B,C overlap like
     so:
             A ------------------
	              C    ---------
			B    ------------------- 
     if there is no good alignment in the A-B overlap the golden
     path would go through C.  However since C is short the
     program would preferentially take sequence from A and B.
     This led to the following crossover situation:
             A -----------------c-
	              C    ---b-a---
			B    -c----------------- 
     which led to the start coordinate of the C fragment being 
     greater than the end fragment.

     There is additional logic that detects this reversal now.
     If it happens it tries moving the crossover point of the
     left, right and then both sides to the middle of their
     respective overlaps.  If this doesn't work it tries
     moving the crossover point to the opposite extreme.
34 - Changed graph traversal algorithm to simpler, constrained
     priority based scheme.  No longer requires removal of
     non-transitive edges. Should fix a few bugs.
35 - Made program accept bac ends that match a bit less
     stringently.
36 - Made program a little tighter about bac ends, but not so
     tight as 34.
37 - Added in constraints to keep raft fragments inside of clones.
38 - Not sure reverse strand mRNA line graph code is right.  Only
     looking at forward strand for the moment.
39 - Put reverse strand back in.  Added priority to clone end nodes
     as well as raft nodes.
40 - Fixed a bug where rafts were getting flipped because not
     keeping track of raft->orientation in raftFlipTendency();
41 - Ignoring bac ends for the moment....
42 - Looking at bac ends again.  Put in constraint so that
     one barge must come after the next barge.
43 - Took out bac ends again.
44 - Various modifications to bac end scoring.  No major
     improvement....
45 - Lowered threshold of BAC end scores that get put through
     by 50.
46 - Regenerate rafts after barges to avoid barge-crossing rafts.
47 - Penalize BAC end connection between far apart clones in 
     default coordinates after barging.
48 - Made above penalty more gradual and starting at 200,000 bases
     rather than 170,000.
49 - Lowered threshold of BAC end scores that are considered by
     200.
50 - Removed threshold of BAC end scores.
51 - Fixed bug in placeClone that might lead to barges not
     encorperating certain clones. 
52 - Removed fix in 51 - seemed to actually introduce bugs.
     Fixed bug where all gaps were 100 bases.
     (Version used in June 15th freeze.)
53 - Working on more rigorously merging rafts. 
54 - Working on a better barge builder.  This adds clones to barge
     at global maximum overlap not local.
55 - When building barges clones farther than 500,000 bases
     apart in the fingerprint map are prevented from merging.
     Clones from 150,000 - 500,000 are gradually discouraged
     from merging.
56 - Changed threshold for detecting contradictory overlaps
     from -2000 to -8000.  This should make it less likely
     to call a clone overlap contradictory in barge building.
     Removed new raft merging code introduced in 53.  It
     crashes on 3/ctg21.
57 - Ignore fragments less than 1500 bases.
58 - Backed off barge building change put in at 54.  Keeping
     map tracking.  Ignoring fragments less than 1 bases.
     (This mostly to test map tracking with old code.)
59 - Ignore fragments less than 1500 bases.
60 - Ignore fragments less than 1500 bases only from draft/predraft.
61 - Ignore fragments less than 1 bases.  Map deviation penalty
     range now from 250,000 - 750,000, cutoff 750,000.
62 - Ignore fragments less than 1500 bases.
63 - Ignore fragments less than 3000 bases.
64 - Use all sized fragments.
65 - Scoring of all repeat but enclosed fragments is increased.
     Raft merging back to v. 53 'improved' way but more debugged.
66 - When extending a raft see if can extend a longer raft....
67 - Decoupled barge-building sequence overlaps from rafts.
68 - Patched in barger style barge-building.
69 - Took out barger-style barge-building.  When extending a raft
     see if can extend a longer raft - but only in final raft-building.
     In raft-building to find clone overlaps don't do this.
70 - Go for longer raft in both passes (like ooGreedy 66).  Removed
     a mistaken "ifdef" so use v. 53 raft merging in end as well
     as start tail cases.  Put in quality score reading, but not
     yet using them for much.
71 - Using quality scores.
72 - Ignoring quality scores.  Using map literally for ordering
     clones if type is "PLACED" in info file.  (cmParse sets this
     up for Sanger chromosomes.)
73 - If a 'nt' file is present will put very high scoring edges
     between NT clones in it.  (NT contigs are finished clones
     that belong next to each other according to NCBI. )
     This isn't working perfectly yet.  Works on raft level
     but not entirely on barge level.
74 - Made NT info work on barge level (I think at least).
     If clone A overlaps clone B by 80% or more, but
     won't merge into same barge as clone B, then clone A
     is marked as totally encompassed by B.  This takes 
     care of case where clone contains a bad plate or
     something.
     (Version used with July 17th freeze).
75 - Fixed bug in 'prefer largest raft' logic that was introduced in
     v. 66.  This bug caused some edges to be lost.
76 - Changed graph to include distance range constraint. Processing 
     paired reads.  Fixed bug where qaFake wrote a zero past end of
     buffer.
77 - Added "chains" to graph.  Implemented as a file where you
     can explicitly link fragment pairs specifying distance
     and score.  The ooChains program creates these files -
     making a long chain out of all frags in a phase 2
     submission, and in whatever littler chains that make
     it into Greg's sequence.inf.
78 - Removed edges with no effective distance info from calculations
     in Belman-Ford algorithm.
79 - Fragment default coordinates now almost same for all frags in a clone.
     (Just increment coordinate by one for each frag in clone as *very*
     week tendency to put singleton rafts in submission order lacking all
     other info.)
80 - Made rafts try to follow raft they are chained to immediately.
     This can get overriden if raft has other predecessors.
     Implemented some heuristics to pack clones better, but
     they are currently commented out pending further testing/debugging.
81 - Put in rest of heuristics for more testing.
82 - After testing density went back to version 79.  Rats!
83 - No longer loading qa files.  (Was loading but ignoring since 72.)
84 - No change except compiled/run on Linux boxes.  (They gave different
     results in the past.)
     Version used for September freeze (oo.18).
85 - Made barge builder start next barge with a clone that's part of
     largest available NT contig.  Made prohibition against joins
     that are too far away more rigorous.
86 - Reduced maximum deviation from map from 1000000 to 700000.
87 - Barge builder starts with next clone ignoring NT contigs again...
88 - NT contigs are joined into a single psuedo-fragment in a single
     psuedo-clone.  This frag is indivisible until the very last stage
     of golden-path generation when it is finally broken back into
     clones.  In all an improvement, but some issues left:
         1) For the larger NT contigs the map itself provides powerful
	    o+o info.  How to capture this?
	 2) Barge and other intermediate files now have NT_XXXXX in
	    place of a series of accessions.  This will break
	    the stats programs and stuff.
	 3) Can't handle finished sequences in NT contigs that are
	    split by Greg.
89 - Fixed some inversions in barge file. 
90 - Put in 'fixed' raft and added scored links to it for large,
     well-oriented-by-the-map rafts.
91 - Small change to make rafts with one wild fragment get fixed
     in orientation.
92 - No change.  (Just bumped version number for easier testing on
     improved 'near best in genome' alignments).
93 - No change - just another version number bump for near best in
     genome comparative testing.
94 - Changed map summary file input from "info" to "info.mm", which
     generally is something placed generated by mapMender program.
95 - Changing program to take barges directly from mm.  Got rid
     of old barge-building code and old NT psuedo-joining code
     (as described in note by version 88).
96 - Eliminating overlaps that violate clone order.
97 - Putting in constraints so if clone A comes before clone B,
     then rafts are ordered A < AB < B.  This is having
     some troubles with noisy input data.  I'm backing
     up to version 96.  To recover you'll need to get
     diGraph.c.97 and diGraph.h.97 as well.
98 - Made output of gold.NN and gl.NN change to gold.NN.noNt and 
     gl.NN.noNt to facilitate swapping individual clones for NT contigs.
99 - Reverting to v 95 type clone end constraints.
100 - Getting flip tendency of individual clones from map file. 
101 - Reduced max intron size to 500k.
102 - If clones are geno.lst but not info.mm, it's ok now.
      (Change to accomodate mendMap weeding some redundant draft
      clones).
