SQLTOXML OVERVIEW

SqlToXml creates an xml dump of all or part of a MySQL relational 
database given a relatively compact dump specification.  The 
resulting XML has tags that correspond to the tables in the database.

A SIMPLE EXAMPLE

Consider a simple database named "iceCreamAccounts," with just three simple tables
defined as so:

create table purchase (
    value float,  # Dollar value of purchase
    buyer int, # Key in customer table
    item int	  # Key in item table
);

create table customer (
     id int,	# Primary key
     name varchar(100)  # Customer name
);

create table item (
     id int,	# Primary key
     name varchar(100),  # Item name
     weight float  # Weight in grams
);

And with the following values in the tables:

Purchase Table:
value customer item
-------------------
1.60	1	1
1.60	2	1
2.50	2	2
1.60	3	1
2.80	3	2

Customer Table:
id	name
-------------------------
1	John Smith
2	Jane Doe
3	George Washington

Item Table:
------------------------------
id	name		weight
1	ice cream cone	102.3
2	double cone	190.4


The XML that sqlToXml would produce would be

<purchases>
  <purchase value="1.60">
     <customer name="John Smith"/>
     <item name="ice cream cone" weight="102.3"/>
  </purchase>
  <purchase value="1.60">
     <customer name="Jane Doe"/>
     <item name="ice cream cone" weight="102.3"/>
  </purchase>
  <purchase value="2.50">
     <customer name="Jane Doe"/>
     <item name="double cone" weight="190.4"/>
  </purchase>
  <purchase value="1.60">
     <customer name="George Washington"/>
     <item name="ice cream cone" weight="102.3"/>
  </purchase>
  <purchase value="2.80">
     <customer name="George Washington"/>
     <item name="double cone" weight="190.4"/>
  </purchase>
</purchases>

The dumpSpec to produce this output would be:

purchase
    .buyer customer.id
    .purchase purchase.id


THE COMMAND LINE

The basic command line is
     sqlToXml database dumpSpec.od output.xml
where database is a mysql database,  dumpSpec is the dump specification,
which will be described in detail below, and output.xml is where to put
the resulting xml.  By convention the dumpSpec has a file suffix of .od
(object dump). To put the xml into standard output put "stdout"
for the output.xml file name.

In addition there are a few command line options:
   -topTag=name - Give the top level XML tag the given name.  By
                  default it will be the same as the database name.
   -query=file.sql - Instead of dumping whole database, just dump those
                     records matching SQL select statement in file.sql.
		     This statement should be of the form:
	select * from table where ...
	             or
	select table.* from table,otherTables where ...
	             Where the table is the same as the table in the first
		     line of dumpSpec.
   -tab=N - number of spaces betweeen tabs in dumpSpec - by default it's 8.
            (It may be best just to avoid tabs in that file though.)

THE DUMPSPEC FILE

The dumpSpec file is a line-oriented file where the indentation is
significant.  Blank lines and lines starting with # are ignored.

The first line of a dumpSpec just contains the name of the master
table which guides the dump.  There will be one record in the dump
for each row of this table.   Subsequent lines are indented and
have two required columns:
    <.keyField>	<table.field>
which define how other tables should be joined into the dump.
The keyFieldfield refers to a key field in the current table.
It will bring in the table in the next column joining on the given
field.   

The XML tag name will be the same as the table name by default.
If you'd prefer another behavior include the keyword "as" after
the table.field, and follow that with the tag name.

By default all fields in a table are dumped, with the exception of
the keyFields that are just used to join in new table.  If you
wish to hide a field, make a line with the field name in the
first column, and instead of table.field, just put the word "hide"
in the second column.

If a line is indented more than the previous line, then the keyField
is a field in the table defined in the previous lines second column.
A slightly more complicated example should help clarify this.

A SLIGHTLY MORE COMPLICATED EXAMPLE

Let's say that our ice cream shop has entered the digital
age, and now wants to store email addresses for the customers.
Some customers may have more than one email address, and some
may not have any address at all.  We can handle this in a
relational database with the following table definitions,
just adding the email table to the simple example:

create table purchase (
    value float,  # Dollar value of purchase
    buyer int, # Key in customer table
    item int	  # Key in item table
);

create table customer (
     id int,	# Primary key
     name varchar(100)  # Customer name
);

create table email (
    customer int,	# The customer this is associated with
    address varchar(100)  # Email addresses
);

create table item (
     id int,	# Primary key
     name varchar(100),  # Item name
     weight float  # Weight in grams
);

As before let's populate these tables with the following values.
Note that George Washington has no email addresses.

Purchase Table:
value customer item
-------------------
1.60	1	1
1.60	2	1
2.50	2	2
1.60	3	1
2.80	3	2

Customer Table:
id	name
-------------------------
1	John Smith
2	Jane Doe
3	George Washington

Email Table:
customer	address
-------------------------
1	jsmith@yahoo.com
1       john.smith@megacorp.com
2	janedoe318@hotmail.com

Item Table:
------------------------------
id	name		weight
1	ice cream cone	102.3
2	double cone	190.4

We'd like the following XML:

<purchases>
  <purchase value="1.60">
     <customer name="John Smith"/>
        <email address="jsmith@yahoo.com"/>
	<email address="john.smith@megacorp.com"/>    
     <item name="ice cream cone" weight="102.3"/>
  </purchase>
  <purchase value="1.60">
     <customer name="Jane Doe"/>
	<email address="janedoe318@hotmail.com"/>    
     <item name="ice cream cone" weight="102.3"/>
  </purchase>
  <purchase value="2.50">
     <customer name="Jane Doe"/>
	<email address="janedoe318@hotmail.com"/>    
     <item name="double cone" weight="190.4"/>
  </purchase>
  <purchase value="1.60">
     <customer name="George Washington"/>
     <item name="ice cream cone" weight="102.3"/>
  </purchase>
  <purchase value="2.80">
     <customer name="George Washington"/>
     <item name="double cone" weight="190.4"/>
  </purchase>
</purchases>

The dumpSpec gets a little trickier.  We treat
the email as a child of the buyer, and we link
to it via the customer.id field, which is connected
to the email.customer field.

purchase
    .buyer customer.id
       .id email.customer
    .purchase 


OUTPUTTING TEXT BETWEEN TAGS

By default sqlToXml will put all of the information in the
file into attributes,  that is name="value" pairs inside of
the XML tags.  It is possible to output a singe field of a
table between the opening and closing XML tag instead by
use of the keyword "text" after the field name.   In our
example above changing the spec to:

purchase
    .buyer customer.id
        .id email.customer
           .address text
    .purchase purchase.id

changes the output to read as so:

<purchases>
  <purchase value="1.60">
     <customer name="John Smith"/>
        <email>jsmith@yahoo.com</email>
	<email>john.smith@megacorp.com</email>
     <item name="ice cream cone" weight="102.3"/>
  </purchase>
  <purchase value="1.60">
     <customer name="Jane Doe"/>
	<email>janedoe318@hotmail.com</email>
     <item name="ice cream cone" weight="102.3"/>
  </purchase>
  <purchase value="2.50">
     <customer name="Jane Doe"/>
	<email>janedoe318@hotmail.com</email>
     <item name="double cone" weight="190.4"/>
  </purchase>
  <purchase value="1.60">
     <customer name="George Washington"/>
     <item name="ice cream cone" weight="102.3"/>
  </purchase>
  <purchase value="2.80">
     <customer name="George Washington"/>
     <item name="double cone" weight="190.4"/>
  </purchase>
</purchases>


PRACTICAL CONSIDERATIONS

XML files produced this way are typically an order of
magnitude larger than the relational database, and the
dump speed is not as fast as you might like.  When
dumping VisiGene, which is well indexed but highly
relational,  it takes 10 minutes.   The size of the
XML is 150 meg, while the size of the relational data
is 25 meg.  Thus for VisiGene it dumps about 2.5 meg
of relational data a minute, and expands the data
about 6 times.   On the other hand to just dump
the 40 meg non-relational all_mrna table from hg17 it 
takes 15 seconds and produces a 90 meg file, so the speed is 
about 160 meg/minute and the expansion just over 2x.

