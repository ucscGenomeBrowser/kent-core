/* gencodeToGeneSymbol.h was originally generated by the autoSql program, which also 
 * generated gencodeToGeneSymbol.c and gencodeToGeneSymbol.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef GENCODETOGENESYMBOL_H
#define GENCODETOGENESYMBOL_H

#define GENCODETOGENESYMBOL_NUM_COLS 3

extern char *gencodeToGeneSymbolCommaSepFieldNames;

struct gencodeToGeneSymbol
/* GENCODE transcript to official gene symbol.  For human, this is the HUGO Gene Nomenclature Committee (HGNC) gene symbo.  For mouse, this is the Mouse Genome Informatics (MGI) gene symbol. */
    {
    struct gencodeToGeneSymbol *next;  /* Next in singly linked list. */
    char *transcriptId;	/* GENCODE transcript identifier */
    char *symbol;	/* HGNC/MGI gene symbol */
    char *geneId;	/* HGNC/MGI symbol id used by database */
    };

void gencodeToGeneSymbolStaticLoad(char **row, struct gencodeToGeneSymbol *ret);
/* Load a row from gencodeToGeneSymbol table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct gencodeToGeneSymbol *gencodeToGeneSymbolLoad(char **row);
/* Load a gencodeToGeneSymbol from row fetched with select * from gencodeToGeneSymbol
 * from database.  Dispose of this with gencodeToGeneSymbolFree(). */

struct gencodeToGeneSymbol *gencodeToGeneSymbolLoadAll(char *fileName);
/* Load all gencodeToGeneSymbol from whitespace-separated file.
 * Dispose of this with gencodeToGeneSymbolFreeList(). */

struct gencodeToGeneSymbol *gencodeToGeneSymbolLoadAllByChar(char *fileName, char chopper);
/* Load all gencodeToGeneSymbol from chopper separated file.
 * Dispose of this with gencodeToGeneSymbolFreeList(). */

#define gencodeToGeneSymbolLoadAllByTab(a) gencodeToGeneSymbolLoadAllByChar(a, '\t');
/* Load all gencodeToGeneSymbol from tab separated file.
 * Dispose of this with gencodeToGeneSymbolFreeList(). */

struct gencodeToGeneSymbol *gencodeToGeneSymbolCommaIn(char **pS, struct gencodeToGeneSymbol *ret);
/* Create a gencodeToGeneSymbol out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new gencodeToGeneSymbol */

void gencodeToGeneSymbolFree(struct gencodeToGeneSymbol **pEl);
/* Free a single dynamically allocated gencodeToGeneSymbol such as created
 * with gencodeToGeneSymbolLoad(). */

void gencodeToGeneSymbolFreeList(struct gencodeToGeneSymbol **pList);
/* Free a list of dynamically allocated gencodeToGeneSymbol's */

void gencodeToGeneSymbolOutput(struct gencodeToGeneSymbol *el, FILE *f, char sep, char lastSep);
/* Print out gencodeToGeneSymbol.  Separate fields with sep. Follow last field with lastSep. */

#define gencodeToGeneSymbolTabOut(el,f) gencodeToGeneSymbolOutput(el,f,'\t','\n');
/* Print out gencodeToGeneSymbol as a line in a tab-separated file. */

#define gencodeToGeneSymbolCommaOut(el,f) gencodeToGeneSymbolOutput(el,f,',',',');
/* Print out gencodeToGeneSymbol as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* GENCODETOGENESYMBOL_H */

