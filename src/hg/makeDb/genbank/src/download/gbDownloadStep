#!/usr/bin/perl
my $usage = 
    "gbDownloadStep [-verbose] [-rsyncVerbose] [-genbank] [-refseq] [-warnOnCheckError]\n"
    . "\n"
    . "Download required genbank and refseq data files.  The result will reflect\n"
    . "the current state of NCBI rsync site, although only a subset of files will be\n"
    . "retrieved.\n"
    . "\n"
    . "It can be run in an empty directory or one where the script has been\n"
    . "previously run.  It handles rollovers to new genbank releases automatically.\n"
    . "This uses the built-in rsync module to avoid problems with error reporting\n"
    . "in other rsync clients and to implement very strict and safe download\n"
    . "procedures.\n"
    . "\n"
    . "Options\n"
    . "  -verbose - print details\n"
    . "  -rsyncVerbose - print details of interaction with rsync server\n"
    . "  -genbank - only update genbank\n"
    . "  -refseq - only update refseq\n"
    . "  -warnOnCheckError - issue a warning instead of an error if check of existing file\n"
    . "   against rsync site fails.  This can be enabled on individual files by create\n"
    . "   an empty file with the same path and the extension .warnOnCheckError\n"
    . "\n";

#
# $Id: gbDownloadStep,v 1.16 2010/04/11 06:48:30 markd Exp $
#

use strict;
use warnings;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Net::FTP;
use gbCommon;
use gbRsync;
setupServerPath();

my $useAsn1 = 0;  # download ASN.1 files instead of GBFF

# Constants
my $RSYNC_HOST = "rsync://ftp.ncbi.nih.gov";

# other globals
my $tmpDir = "tmp";

# globals
$main::verbose = 0;
$main::genbankUpd = 0;
$main::refseqUpd = 0;
$main::warnOnCheckError = 0;

# should a warning be generated if the specified file doesn't match server?
sub shouldWarnOnCheckError($) {
    my ($localFile)  = @_;
    return $main::warnOnCheckError || (-e $localFile.".warnOnCheckError");
}

# determine version of GenBank on the NCBI server from the 
# GB_Release_Number file.
sub getGenBankVer() {
    my $remRelNum = $useAsn1 ? "ncbi-asn1/GB_Release_Number"
        : "genbank/GB_Release_Number";
    my $locRelNum = "$tmpDir/GB_Release_Number";
    unlink $locRelNum;
    rsyncGet($remRelNum, $locRelNum);
    my $version = readFile($locRelNum);
    chomp $version;
    $version .= ".0";
    unlink($locRelNum);
    return $version;
}

# determine of version of RefSeq on the NCBI server by examining the
# release/release-catalog directory
sub getRefSeqVer() {
    my @catFiles = rsyncGetDirList("refseq/release/release-catalog", "--include=\"release*\"");
    my $version;
    foreach my $file (@catFiles) {
        if (($version) = ($file =~ m/release(.+)\.files\.installed$/)) {
            last;
        }
    }
    if (!defined($version)) {
        gbError("can't find $RSYNC_HOST/refseq/release/release-catalog/release*.files.installed");
    }
    return $version;
}

# Download a full release
sub downloadOrCheckFull($$$$;$) {
    my ($justCheck, $remDir, $outDir, $fileRE, $excludeRE) = @_;
    my @files = rsyncGetDirList($remDir, $fileRE);
    my @gotFiles = ();

    if ($main::verbose) {
        if ($justCheck) {
            print STDERR "check of $remDir with $outDir\n";
        } else {
            print STDERR "full download of $remDir to $outDir\n";
        }
    }

    foreach my $remFile (@files) {
        my $file = basename($remFile);
        if (!defined($excludeRE) || !($file =~ $excludeRE)) {
            my $localFile = "$outDir/$file";
            my $fullRemFile = "$remDir/$remFile";
            if (rsyncGetOrCheck($justCheck, shouldWarnOnCheckError($localFile), $fullRemFile, $localFile)) {
                push(@gotFiles, $localFile);
            }
        } else {
            if ($main::verbose) {
                print STDERR "skip remote file: $remFile\n";
            }
        }
    }
    if ($#gotFiles >= 0) {
        if ($justCheck) {
            die("BUG: shouldn't be here");
        }
        md5Files("$outDir/full.md5", @gotFiles);
    }
    return ($#gotFiles >= 0);
}

# Download or check daily files.
sub downloadOrCheckDaily($$$) {
    my($remDir, $outDir, $fileRE) = @_;
    my @files = rsyncGetDirList($remDir, $fileRE);

    if ($main::verbose) {
        print STDERR "download or check of $remDir to $outDir\n";
    }

    if ( ! -e $outDir) {
        makeDir($outDir);
    }

    foreach my $remFile (@files) {
        my $file = basename($remFile);
        print STDERR "file = $file, fileRE = $fileRE\n";
        my $localFile = "$outDir/$file";
        my $fullRemFile = "$remDir/$file";
        if (rsyncGetOrCheck(0, shouldWarnOnCheckError($localFile), $fullRemFile, $localFile)) {
            md5Files("$outDir/$file.md5", $localFile);
        }
    }
}

# Update GenBank files. If no directory exists for the curent genbank
# version, download the full release. Get new, non-cumulative daily
# files.
sub updateGenBank() {
    my($version) = getGenBankVer();
    my($fullInclude, $dailyInclude, $rsyncDir);
    if ($useAsn1) {
        $rsyncDir = "ncbi-asn1";
        $fullInclude = "--include=\"gb*.aso.gz\" --include=\"README*\" --include=\"GB_RELEASE_Number\"";
        $dailyInclude = "--include=\"nc*.aso.gz\"";
    } else {
        $rsyncDir = "genbank";
        $fullInclude = "--include=\"gb*.seq.gz\" --include=\"README*\" --include=\"gbacc.idx.gz\" --include=\"GB_RELEASE_NUMBER\"";
        $dailyInclude = "--include=\"nc*.flat.gz\"";
    }

    my $genBankDir = "data/download/genbank.$version";
    my $dirExists = -e "$genBankDir";

    if (!($dirExists))
        {
        endTask();
        die("STOPPING: genbank directory $genBankDir does not exist. Manually create this directory after validating the dailies are correct");
        }
    # Either get or check full release. Explict get releases notes from flat-file dir,
    # as they are not in the asn1 directory
    my $justCheck = -e "$genBankDir/full.md5";

    downloadOrCheckFull($justCheck, $rsyncDir, $genBankDir, $fullInclude);
    my $localFile = "$genBankDir/gbrel.txt";
    rsyncGetOrCheck($justCheck, shouldWarnOnCheckError($localFile), "genbank/gbrel.txt", $localFile);

    # now get or verify dailies
    downloadOrCheckDaily("$rsyncDir/daily-nc/", "$genBankDir/daily-nc/", $dailyInclude);

    return $version;
}

# Update RefSeq files. If no directory exists for the curent RefSeq version,
# download the full release. Get new, non-cumulative daily files.  
sub updateRefSeq() {
    my($version) = getRefSeqVer();
    my($fullRE, $dailyRE);
    if ($useAsn1) {
        $fullRE = "--include=\"complete*\.bna\.gz\"";
        $dailyRE = "--include=\"rsnc*\.bna\.gz\"";
    } else {
        $fullRE = "--include=\"complete*rna\.gbff\.gz\"";
        $dailyRE = "--include=\"rsnc*\.gbff\.gz\"";
    }

    my $refSeqDir = "data/download/refseq.$version";

    my $justCheck = -e "$refSeqDir/release/complete/full.md5";
    downloadOrCheckFull($justCheck, "refseq/release/complete", "$refSeqDir/release/complete", $fullRE);

    # Get or verify dailies. We just download all dailiess, even if they are
    # before cummulative download.  It's too risky to rely on the times.
    downloadOrCheckDaily("refseq/daily/", "$refSeqDir/daily", $dailyRE);
}

# Entry point
while (($#ARGV >= 0) && ($ARGV[0] =~/^-.*/)) {
    my $opt = $ARGV[0];
    shift @ARGV;
    if ($opt eq "-verbose") {
        $main::verbose = 1;
        $gbCommon::verbose = 1;
    } elsif ($opt eq "-genbank") {
        $main::genbankUpd = 1;
    } elsif ($opt eq "-refseq") {
        $main::refseqUpd = 1;
    } elsif ($opt eq "-warnOnCheckError") {
        $main::warnOnCheckError = 1;
    } else {
        gbError("invalid option \"$opt\"");
    }
}
if (!($main::genbankUpd || $main::refseqUpd)) {
    $main::genbankUpd = 1;
    $main::refseqUpd = 1;
}

if ($#ARGV >= 0) {
    die("Wrong # args: $usage");
}
checkOnBuildServer();

beginTask("build", "download");

rsyncInit($RSYNC_HOST);

if ($main::genbankUpd) {
    updateGenBank();
}
if ($main::refseqUpd) {
    updateRefSeq();
}
endTask();
