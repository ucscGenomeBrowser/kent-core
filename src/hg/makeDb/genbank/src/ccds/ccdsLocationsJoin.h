/* ccdsLocationsJoin.h was originally generated by the autoSql program, which also 
 * generated ccdsLocationsJoin.c and ccdsLocationsJoin.sql.  This header links the database and
 * the RAM representation of objects. */

/* Copyright (C) 2006 The Regents of the University of California 
 * See kent/LICENSE or http://genome.ucsc.edu/license/ for licensing information. */

#ifndef CCDSLOCATIONSJOIN_H
#define CCDSLOCATIONSJOIN_H

#define CCDSLOCATIONSJOIN_NUM_COLS 6

struct ccdsLocationsJoin
/* parses join used to get exon locations */
    {
    struct ccdsLocationsJoin *next;  /* Next in singly linked list. */
    int ccds_uid;	/* CcdsUids.ccds_uid */
    int ccds_version;	/* GroupVersions.ccds_version */
    char chrom[3];	/* Locations_GroupVersions.chromosome, maybe XY */
    char strand[2];	/* Groups.orientation */
    int start;	/* Locations.chr_start */
    int stop;	/* Locations.chr_stop */
    };

void ccdsLocationsJoinStaticLoad(char **row, struct ccdsLocationsJoin *ret);
/* Load a row from ccdsLocationsJoin table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct ccdsLocationsJoin *ccdsLocationsJoinLoad(char **row);
/* Load a ccdsLocationsJoin from row fetched with select * from ccdsLocationsJoin
 * from database.  Dispose of this with ccdsLocationsJoinFree(). */

struct ccdsLocationsJoin *ccdsLocationsJoinLoadAll(char *fileName);
/* Load all ccdsLocationsJoin from whitespace-separated file.
 * Dispose of this with ccdsLocationsJoinFreeList(). */

struct ccdsLocationsJoin *ccdsLocationsJoinLoadAllByChar(char *fileName, char chopper);
/* Load all ccdsLocationsJoin from chopper separated file.
 * Dispose of this with ccdsLocationsJoinFreeList(). */

#define ccdsLocationsJoinLoadAllByTab(a) ccdsLocationsJoinLoadAllByChar(a, '\t');
/* Load all ccdsLocationsJoin from tab separated file.
 * Dispose of this with ccdsLocationsJoinFreeList(). */

struct ccdsLocationsJoin *ccdsLocationsJoinCommaIn(char **pS, struct ccdsLocationsJoin *ret);
/* Create a ccdsLocationsJoin out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new ccdsLocationsJoin */

void ccdsLocationsJoinFree(struct ccdsLocationsJoin **pEl);
/* Free a single dynamically allocated ccdsLocationsJoin such as created
 * with ccdsLocationsJoinLoad(). */

void ccdsLocationsJoinFreeList(struct ccdsLocationsJoin **pList);
/* Free a list of dynamically allocated ccdsLocationsJoin's */

void ccdsLocationsJoinOutput(struct ccdsLocationsJoin *el, FILE *f, char sep, char lastSep);
/* Print out ccdsLocationsJoin.  Separate fields with sep. Follow last field with lastSep. */

#define ccdsLocationsJoinTabOut(el,f) ccdsLocationsJoinOutput(el,f,'\t','\n');
/* Print out ccdsLocationsJoin as a line in a tab-separated file. */

#define ccdsLocationsJoinCommaOut(el,f) ccdsLocationsJoinOutput(el,f,',',',');
/* Print out ccdsLocationsJoin as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* CCDSLOCATIONSJOIN_H */

