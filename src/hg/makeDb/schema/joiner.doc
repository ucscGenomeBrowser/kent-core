INTRODUCTION

To copy the all.joiner to the right place in the your cgi-bin directory,
run a "make" in the src/hg/hgTables directory.

The .joiner file describes relationships between tables.
In particular it groups together fields in different tables
that refer to the same identifier.  The first field in the group
normally contains all instances of that identifier, while subsequent
fields may contain only a subset.  In relational database terms
the first field in the group is the primary key, and other fields
are foreign keys.

The joiner file is somewhat more flexible than foreign keys in
a relational database.  It allows fields that contain comma separated
(or other simply-separated) lists of identifiers.  It allows an
identifier to contain a constant prefix or suffix in one field,
and not in another.  It allows tables to be split up for performance
reasons (such as the per-chromosome tables common at UCSC) but still
to be viewed logically as the same table.  It allows you to specify
the identifier relationships in multiple databases simultatiously.
It also can describe cases where it can be worthwhile to do a join
on two fields, but where both fields contain some of their own unique
identifiers.

The program 'joinerCheck' performs some automatic checking on joiner
files.  Joiner files are also intended to be used in generating automatic
documentation and database browsing tools.

The joiner file is a line-oriented format.  In some cases blank lines
are also significant.  Lines starting with # are treated as comments
and ignored.  There are two primary types of record in a joiner file -
a 'set' statement which creates a variable, and an identifier statement.

THE SET STATEMENT

The set statement is quite simple:
   set varName value
Here varName should start with a letter, and can be followed by any
number of letters and numbers.  The value extends to the end of the
line.  Once a variable is defined this way, $varName afterwards
will be replaced with the value from the set line.  Variable can
be defined in terms of other variables.  In some cases it may be
necessary to use ${varName} rather than $varName if doing a substitution
in the middle of another word.

THE IDENTIFIER STATEMENT

The identifier statement defines an identifier shared across tables.
The basic format is one line containing the identifier name and attributes,
a quoted comment line, a line for the field that serves as the primary
key for the identifier, and then a line for each other field that shares
the identifier.  The field lines describe the field in database.table.field
format, and then attributes if any of the field.  The database component
may be a comma separated list if the field is in more than one database.
A blank line indicates the end of the identifier statement.
Here's an example

   identifier customerId typeOf=personId
   "This is the id of someone who has bought something from us."
        sales.customer.id
	sales.sale.customer
	sales.return.customer
	corperate.customer.id chopBefore=CID:
	legal2004,legal2003.liability.plaintiff chopBefore=CID: chopAfter=.
	legal2004,legal2003.recall.notified chopBefore=CID: chopAfter=. comma

Identifier Line Attributes:
  typeOf - indicates this is a subset of a parent type of identifier.
           Joins between fields in this identifier and preceding generations 
	   of identifiers are often fruitful.  
     value: parent identifier.  
  external - indicates this identifier is defined outside of our own databases
     value: name of organization that defines identifier
  fuzzy - indicates that while in many cases the identifier will be shared
          between the listed fields, the relationship is informal. In 
	  particular the first field is not expected to contain all 
	  instances of the identifier.  
     value: n/a
  dependency - indicates that all tables mentioned in field lines below are
          dependent on the first table mentioned.
     value: n/a

Field Line Attributes:
  comma - the field contains a comma separated list of the identifier.
     value: n/a
  separator - the field contains a list of the identifier.
     value: a single character list separator.
  chopBefore - the field contains some prefix that needs to be chopped off
               before it is considered as an identifier.  If the prefix
	       is missing then no chopping occurs.
     value: a search string. Everything before the first instance of
            this search string (including the search string itself) is
	    considered prefix, and is removed before joining.
  chopAfter - the field contains some suffix that needs to be chopped off
              before it is considered as an identifier
     value: a search string. Everything after the last instance of
            this search string (including the search string itself) is
	    considered suffix, and is removed before joining.
  indexOf - valid only for lists.  This indicates that the identifier
            is actually the position (zero based) of the item in the list
	    rather than item itself.
     value: n/a
  dupeOk - used to indicate that duplicate identifiers are allowed in the
	   first field. - valid only on primary key, not on secondary keys
     value: n/a
  minCheck - used to allow some identifiers not to be in primary key.
     value: A number between 0.0 and 1.0 that indicates the minimum ratio of
            identifiers in the field that are in the primary key.
  full - used to show that every key in the primary key should also occur in 
         this field
     value: n/a
  unique - used to show that every key in the primary key occurs at most once
           in this field
     value: n/a
  splitPrefix - used to lump together tables that share a common prefix
                into a single logical table.
     value: Prefix string that may include SQL wildcard characters.  A
            popular one at UCSC is "chr%\_" (the underscore is escaped
            because we want a literal match for _, not the SQL wildcard).
  splitSuffix - used to lump together tables that share a common suffix
                into a single logical table.  May be used with splitPrefix.
     value: Suffix string that may include SQL wildcard characters.  
  exclude - used to exclude a particular identifier from having to be in
            primary key.  There may be multiple exclude attributes for a field.
     value: identifier to exclude.  The empty string may be excluded with
            a exclude= (that is following the equal immediately with a space).

  
IDENTIFIER MACROS

In some cases there may be multiple instances of a set of
interrelated tables.  At UCSC an example of this is the 
chains and nets that describe a pairwise alignment.  To
avoid having to have a separate identifier for each pair
of species there is a small macro expansion facility built
in. Here's an example:

identifier chain[Mm3,Rn2]Id
"Link together chain info"
    $gbd.chain[].id 
    $gbd.chain[]Link.chainId 
    $gbd.net[].chainId

This is expanded to one identifier for each item in the
comma-separated list inside of square brackets as so:

identifier chainMm3Id
"Link together chain info"
    $gbd.chainMm3.id 
    $gbd.chainMm3Link.chainId 
    $gbd.netMm3.chainId

identifier chainRn2Id
"Link together chain info"
    $gbd.chainRn2.id 
    $gbd.chainRn2Link.chainId 
    $gbd.netRn2.chainId

EXCLUDED DATABASES
   The comma-separated database lists typically are set up with
   variables, such as $gdb in the above examples.  It's possible
   to exclude a database from such a list.  To exclude the 'mm4' database
   but include everything else in $gbd, you'd specify:
       $gbd,!mm4
   It is possible to exclude more than one database this way,  and the
   ! items can be at any position in the list.


OTHER STATEMENTS

There's a number of other statements that are typically used just
once or twice in a joiner file.

exclusiveSet - This is used to indicate that only one out of a group 
    databases should be considered at one time.  At UCSC this is used 
    to group together all of the genome/assembly specific databases so that
    spurious links are not generated between them.  The syntax of
    this is a line starting with the word 'exclusiveSet' and followed
    by a comma-separated list of databases.

databasesChecked - This keyword is followed by a comma-separated list of
    all databases that should be checked by the joiner file.

databasesIgnored - This is followed by a comma-separated list of databases
    not checked by the joiner file.  The joinerCheck program will complain 
    about any databases in the system that are not in either the 
    databaseChecked or databaseIgnored list.  This is just to help keep
    databases from slipping under the radar, since generally you will want
    to add a new database to various places in the joiner file.

dependency - This line indicates that a table depends on other tables.
    The joinerCheck program will make sure that the last update date on
    the table is after any of the tables it depends on.  The syntax is
    just a list of database.tables.  The first table is the dependent table
    and the rest are the ones it depends on.  Note that the 'dependency'
    attribute on an identifier line can also specify dependencies.

tablesIgnored - This statement describes tables that are not checked.
    The joinerCheck program will complain about tables in the system
    that are not in any of the identifiers, and not in the tablesIgnored.
    This is to keep new tables from falling through the cracks.
    The syntax of this is a line starting with "tablesIgnored" and
    followed by a comma separated list of databases, and then 
    a line for each table.  The table names may include the
    SQL wildcard '%' (which is equivalent to the '*' wildcard in
    most file systems.)  The statement is terminated by a blank line.

