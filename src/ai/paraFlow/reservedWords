Here are the reserved words in ParaFlow.  Reserved words can't
be used as variable, class, or function names.

break - breaks out of a loop
case - do one of a number of things depending on the value of an expression.
       Serves same purpose as C switch, but syntax is cleaner.
catch - catch an error.  See also try.  Note use punt instead of throw
       to raise an error, but this is just a function, not a reserved word.
class - definition of object type
continue - skips to next iteration of loop
else - execute following statement when if condition false or at end of case
extends - specifies class heirarchy
flow - data flow function definition
for - loop - either for (el in collection) or for (;;) like C.
if - execute following statement if condition is true
in - used in para and foreach constructs.  "foreach (el in collection)"
into - defines output, used in invocation of para functions
include	- include a file
nil - indicates a variable not associated with a string or object.
of - connects collection type to element type
para - parallelizable function definition and invocation
polymorphic - indicates that a class method can be overridden
return - exit from a function
static - makes local variable persist between calls to a function.
to - start of function definition.  Links keys to values for dirs.
try - surrounds a block of code that might encounter an error.
while - loop as long as condition is true

Some other words being considered to add to this list:

enum		C-style enumerated valeus.
import		Possibly use instead of 'into'
private		Denies use outside of defining module or class.
readonly	Write access denied even inside defining module/class.
constant	Write access denied even inside defining module/class.
struct		Perhaps for simple aggregates with no reference counting or methods.
use		Possibly use instead of 'into'
writable	Writable outside of defining module or class.  Implies readable.
