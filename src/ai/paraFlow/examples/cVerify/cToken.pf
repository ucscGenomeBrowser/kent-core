
global short ctComment=256;
global short ctString=257;
global short ctChar=258;
global short ctInt=259;
global short ctLong=260;
global short ctFloat=261;
global short ctName=262;
global short ctShiftLeft=263;
global short ctShiftRight=264;
global short ctPlusPlus=265;
global short ctMinusMinus=266;
global short ctEqualEqual=267;
global short ctPlusEqual=268;
global short ctTimesEqual=269;
global short ctDivEqual=270;
global short ctModEqual=271;
global short ctMinusEqual=272;
global short ctGreaterEqual=273;
global short ctLessEqual=274;
global short ctAndAnd=275;
global short ctOrOr=276;
global short ctEof=277;
global short ctAndEqual = 278;
global short ctOrEqual = 279;
global short ctXorEqual = 280;
global short ctNotEqual = 281;
global short ctTilde = 282;
global short ctBang = 283;
global short ctSharp = 284;
global short ctPercent = 285;
global short ctCaret = 286;
global short ctAnd = 287;
global short ctAsterisk = 288;
global short ctOpenParen = 289;
global short ctCloseParen = 290;
global short ctMinus = 291;
global short ctPlus = 292;
global short ctEqual = 293;
global short ctOpenCurly = 294;
global short ctCloseCurly = 295;
global short ctOpenSquare = 296;
global short ctCloseSquare = 297;
global short ctOr = 298;
global short ctColon = 299;
global short ctSemi = 300;
global short ctEscape = 301;
global short ctGreater = 302;
global short ctLess = 303;
global short ctComma = 304;
global short ctDot = 305;
global short ctQuestion = 306;
global short ctDiv = 307;
global short ctDotDotDot = 308;
global short ctPointer = 309;
global short ctLeftShiftEqual = 310;
global short ctRightShiftEqual = 311;

flow isdigit(char c) into bit is
    {
    case (c)
       {
       '0','1','2','3','4','5','6','7','8','9' : is=true;
       else: is = false;
       }
    }

flow isalpha(char c) into bit is
    {
    case (c)
        {
	'a','b','c','d','e','f','g','h','i','j','k','l','m','n',
	'o','p','q','r','s','t','u','v','w','x','y','z',
	'A','B','C','D','E','F','G','H','I','J','K','L','M','N',
	'O','P','Q','R','S','T','U','V','W','X','Y','Z' : is=true;
	}
    }

flow iscsymf(char c) into bit is
    {
    is =  isalpha(c) || c == '_';
    }

flow iscsym(char c) into bit is
    {
    is = isdigit(c) || isalpha(c) || c == '_';
    }


global class cToken
// A token in a C program.
    {
    short type; // Token type.
    string val; // Literal contents.
    string spaceBefore;	// White space before token.
    string fileName;	// Name of file.
    int line;	// Starting line.
    to init(){}
    };

global class cTkz
// Creates a stream of cTokens
    {
    cToken cur;		// Current token
    cToken next;	// Next token
    cToken twoAhead;	// Next token after than
    cToken threeAhead;	// Next token after than
    string fileName;	// Current file name

    local string lineBuf="";	// Position in line
    local int lineCount;	// Linein file.
    local int linePos;		// Position within line
    char reusedChar = 0;	// If non-zero we reuse this char
    local file f;		// File
    bit eof;		// Set to true at end of file.
    local dir of string whiteSpaces = ();  // Dir of all white space types
    local dir of string names = ();// Save room on names by putting into dir

    to init(string fileName)
    // Set up tokenizer on file.  Call advance to fetch
    // first token.
        {
	self.fileName = fileName;
	f = fileOpen(fileName, "r");
	advance();
	advance();
	advance();
	}

    local to advanceLine() 
        {
	lineBuf = f.readLine();
	if (!lineBuf)
	   eof = true;
	lineCount += 1;
	linePos = 0;
	}

    local to reuseChar(char c)
        {
	reusedChar = c;
	}

    local to nextChar() into char c
    // Get next character.
        {
	if (reusedChar)
	    {
	    c = reusedChar;
	    reusedChar = 0;
	    }
	else
	    {
	    if (linePos >= lineBuf.size)
		advanceLine();
	    if (eof)
		c = 0;
	    else
		{
		c = lineBuf[linePos];
		linePos += 1;
		}
	    }
	}

    to skipSpace() into string s
        {
	dyString dy = "";
	char c;
	for (;;)
	   {
	   c = nextChar();
	   if (c == ' ' || c == '\t' || c == '\n')
	       dy += c;
	   else
	       {
	       reuseChar(c);
	       break;
	       }
	   }
	s = whiteSpaces[dy];
	if (s == nil)
	    {
	    whiteSpaces[dy] = dy;
	    s = whiteSpaces[dy];
	    }
	}

    to parseInteger(char c) into dyString s
    // Stuff all successive digits into s
        {
	s = "";
	while (isdigit(c))
	    {
	    s += c;
	    c = nextChar();
	    }
	reuseChar(c);
	}

    to singleChar(cToken tok, char c, short type)
    // Finish up a single character token
        {
	tok.val = c;
	tok.type = type;
	}

    to doubleChar(cToken tok, char a, char b, short type)
    // Finish up a double char token;
        {
	tok.val = a + "" + b;
	tok.type = type;
	}

    to lineComment(cToken tok)
    // Got a //, read until end of line
        {
	dyString dy = "//";
	for (;;)
	   {
	   char c = nextChar();
	   if (c == 0)
	       break;
	   dy += c;
	   if (c == '\n')
	       break;
	   }
	tok.type = ctComment;
	tok.val = dy;
	}

    to cComment(cToken tok)
    // Got a /*.  Read until matching */
        {
	dyString dy = "/*";
	char lastC = 0;
	for (;;)
	    {
	    char c = nextChar();
	    if (c == 0)
	        break;
	    dy += c;
	    if (c == '/' && lastC == '*')
	        break;
	    lastC = c;
	    }
	tok.type = ctComment;
	tok.val = dy;
	}

    to parseNum(cToken tok,char c)
        {
	dyString s = parseInteger(c);
	c = nextChar();
	case (c)
	    {
	    'L', 'U' : 
		{
	    	s += c;
		tok.type = ctLong;
		}
	    '.' : 
		{
	    	s += parseInteger(c);
		tok.type = ctFloat;
		}
	    'x', 'X' : 
	        {
		s += c; 
		c = nextChar();
		if (isdigit(c))
		    s += parseInteger(c);
		else
		    reuseChar(c);
		tok.type = ctInt;
		}
	    else: 
		{
	    	reuseChar(c);
		tok.type = ctInt;
		}
	    }
	tok.val = s;
	}

    to parseQuote(cToken tok, char quoteC)
        {
	dyString dy = quoteC;
	bit isEscaped = false;

	for (;;)
	    {
	    char c = nextChar();
	    if (!c)
	       break;
	    dy += c;
	    if (isEscaped)
	        isEscaped = false;
	    else
	        {
		if (c == quoteC)
		   break;
		else if (c == '\\')
		   isEscaped = true;
		}
	    }
	tok.val = dy;
	}

    to parseSymbol(cToken tok, char c)
        {
	dyString dy = c;
	for (;;)
	    {
	    c = nextChar();
	    if (!iscsym(c))
	        {
		reuseChar(c);
		break;
		}
	    dy += c;
	    }
	tok.type = ctName;
	tok.val = names[dy];
	if (!tok.val)
	    {
	    names[dy] = dy;
	    tok.val = names[dy];
	    }
	}

    local to adv() into (cToken tok)
        {
	tok = ();
	tok.spaceBefore = skipSpace();
	tok.line = lineCount;
	tok.fileName = fileName;
	char c = nextChar();
	if (isdigit(c))
	    parseNum(tok, c);
	else if (iscsymf(c))
	    parseSymbol(tok, c);
	else 
	    {
	    case (c)
	        {
		0  : tok.type = ctEof;
		'!' : 
		    {
		    char nextC = nextChar();
		    case (nextC)
		        {
			'=' : doubleChar(tok, c,nextC,ctNotEqual);
			else: {singleChar(tok,c,ctBang); reuseChar(nextC);}
		        }
		    }
		'%' :
		    {
		    char nextC = nextChar();
		    case (nextC)
		        {
			'=' : doubleChar(tok, c,nextC,ctModEqual);
			else: {singleChar(tok,c,ctPercent); reuseChar(nextC);}
		        }
		    }
		'^' :
		    {
		    char nextC = nextChar();
		    case (nextC)
		        {
			'=' : doubleChar(tok, c,nextC,ctXorEqual);
			else: {singleChar(tok,c,ctCaret); reuseChar(nextC);}
		        }
		    }
		'&' :
		    {
		    char nextC = nextChar();
		    case (nextC)
		        {
			'=' : doubleChar(tok, c,nextC,ctAndEqual);
			'&' : doubleChar(tok, c,nextC,ctAndAnd);
			else: {singleChar(tok,c,ctAnd); reuseChar(nextC);}
		        }
		    }
		'|' :
		    {
		    char nextC = nextChar();
		    case (nextC)
		        {
			'=' : doubleChar(tok, c,nextC,ctOrEqual);
			'|' : doubleChar(tok, c,nextC,ctOrOr);
			else: {singleChar(tok,c,ctAnd); reuseChar(nextC);}
		        }
		    }
		'*' :
		    {
		    char nextC = nextChar();
		    case (nextC)
		        {
			'=' : doubleChar(tok, c,nextC,ctTimesEqual);
			else: {singleChar(tok,c,ctAsterisk); reuseChar(nextC);}
		        }
		    }
		'-' :
		    {
		    char nextC = nextChar();
		    case (nextC)
		        {
			'=' : doubleChar(tok, c,nextC,ctMinusEqual);
			'-' : doubleChar(tok, c,nextC,ctMinusMinus);
			'>' : doubleChar(tok, c,nextC,ctPointer);
			else: {singleChar(tok,c,ctMinus); reuseChar(nextC);}
		        }
		    }
		'+' :
		    {
		    char nextC = nextChar();
		    case (nextC)
		        {
			'=' : doubleChar(tok, c,nextC,ctPlusEqual);
			'+' : doubleChar(tok, c,nextC,ctPlusPlus);
			else: {singleChar(tok,c,ctPlus); reuseChar(nextC);}
		        }
		    }
		'=' :
		    {
		    char nextC = nextChar();
		    case (nextC)
		        {
			'=' : doubleChar(tok, c,nextC,ctEqualEqual);
			else: {singleChar(tok,c,ctEqual); reuseChar(nextC);}
		        }
		    }
		'<' :
		    {
		    char nextC = nextChar();
		    case (nextC)
		        {
			'=' : doubleChar(tok, c,nextC,ctLessEqual);
			'<' : 
			    {
			    nextC = nextChar();
			    if (nextC == '=')
			        {
				tok.val = '<<=';
				tok.type = ctLeftShiftEqual;
				}
			    else
			        {
				reuseChar(nextC);
				doubleChar(tok, c,c,ctShiftLeft);
				}
			    }
			else: {singleChar(tok,c,ctLess); reuseChar(nextC);}
		        }
		    }
		'>' :
		    {
		    char nextC = nextChar();
		    case (nextC)
		        {
			'=' : doubleChar(tok, c,nextC,ctGreaterEqual);
			'>' : 
			    {
			    nextC = nextChar();
			    if (nextC == '=')
			        {
				tok.val = '>>=';
				tok.type = ctRightShiftEqual;
				}
			    else
				{
				reuseChar(nextC);
				doubleChar(tok, c,c,ctShiftRight);
				}
			    }
			else: {singleChar(tok,c,ctGreater); reuseChar(nextC);}
		        }
		    }
		'/' : 
		    {
		    char nextC = nextChar();
		    case (nextC)
		        {
			'/' : lineComment(tok);
			'*' : cComment(tok);
			'=' : doubleChar(tok, c,nextC,ctDivEqual);
			else: {singleChar(tok,c,ctDiv); reuseChar(nextC);}
			}
		    }
		'.' : 
		    {
		    char nextC = nextChar();
		    if (nextC == '.')
		        {
			nextC = nextChar();
			if (nextC != '.')
			    punt("No third dot line $lineCount of $fileName");
			tok.val = "...";
			tok.type = ctDotDotDot;
			}
		    else
			{
			singleChar(tok,c,ctDot);
			reuseChar(nextC);
			}
		    }
		"'" : {parseQuote(tok, c); tok.type = ctChar}
		'"' : {parseQuote(tok, c); tok.type = ctString}
		'~' : singleChar(tok, c, ctTilde);
		'#' : singleChar(tok,c,ctSharp);
		'(' : singleChar(tok,c,ctOpenParen);
		')' : singleChar(tok,c,ctCloseParen);
		'{' : singleChar(tok,c,ctOpenCurly);
		'}' : singleChar(tok,c,ctCloseCurly);
		'[' : singleChar(tok,c,ctOpenSquare);
		']' : singleChar(tok,c,ctCloseSquare);
		':' : singleChar(tok,c,ctColon);
		';' : singleChar(tok,c,ctSemi);
		'\\' : singleChar(tok,c,ctEscape);
		',' : singleChar(tok,c,ctComma);
		'?' : singleChar(tok,c,ctQuestion);
		else: punt("Unrecognized char $c line $lineCount of $fileName");
		}
	    }
	}

    to advance() 
        {
	cToken tok;
	for (;;)
	    {
	    tok = adv();
	    if (tok.type != ctComment)
	        break;
	    }
	cur = next;
	next = twoAhead;
	twoAhead = threeAhead;
	threeAhead = tok;
	}
    }



// TODO - add isalpha, isalnum, isspace, isnum.
// Consider somehow making them methods of char.
// Consider making dyString += char more efficient.
// Enums!

/*-TESTING
string fileName = "c.txt";
if (args.size > 0)
    fileName = args[0];
cTkz tkz = (fileName);
for (;;)
    {
    tkz.advance();
    print(tkz.cur);
    if (tkz.cur.type == ctEof)
        break;
    }
TESTING-*/

