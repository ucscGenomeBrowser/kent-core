9 -  Moving some hard coded stuff to command line.  Making bzp struct to
     hold blatz parameters.
     0.60s chain 647004 human2 100000 + 157 98620 mouse17 75584 + 132 73111 1
10 - Adding in inner alignment.  Slow!
     8.15s chain 791785 human2 100000 + 27 98874 mouse17 75584 + 24 73300 1
11 - Took out inner alignment.  Adding in affine-scored banded alignment.
     0.68s chain 725835 human2 100000 + 27 98636 mouse17 75584 + 24 73124 1
12 - Split out index and main modules.
     0.64s chain 725835 human2 100000 + 27 98636 mouse17 75584 + 24 73124 1
13 - Fixed bug in banded extension.
     0.72s chain 791272 human2 100000 + 27 98636 mouse17 75584 + 24 73124 1
14 - Made banded extension quit after drop in score relative to max score
     seen so far, rather than relative to zero.
     0.72s chain 791272 human2 100000 + 27 98636 mouse17 75584 + 24 73124 1
15 - Changed defaults to have max gap of 55, and max extension of 3000
     during banded extension phase.  This improves score a lot (as good
     as blastz at defaults on 100k set, slightly below on clock set) but makes run
     time about 4x as long, maybe worse even on meg set.
     1.85s chain 948856 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
16 - Experimenting around with alignments with smaller seeds inside gaps of
     initial alignment.  Slow initially.  Playing with boxClump to
     consolidate regions.
     2.06 chain 948856 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
17 - Shrinking initial msp's by up to 50 on either end to give banded
     aligner a chance to work more.
     2.17s chain 985569 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
18 - Shinking initial msp's by up to 200.
     2.19s chain 986899 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     2:26.07 chain 3344519 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
19 - Adding inner step.  Works with boxClump to avoid duplicate regions.
     Reduces seed weight to 8, scores by 500, but reduces band size and
     extension length to 1/6 of usual. 
     3.34s chain 1044702 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     8:54.66 chain 4568238 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
20 - Discarding all but best chain early in the inner step.
     2.88s chain 1044702 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     5:21.86 chain 4441798 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
21 - Only doing expansion with smaller seed for chains scoring above 5000.
     2.62s chain 1044702 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     2:31.79 chain 4398274 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
22 - Removing chain filtering on minScore before expansion.
     2.61s chain 1048672 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     2:34:53 chain 4687214 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
23 - Tweaking default parameters to minGapless=1800 minChain=2100 minScore=5000
     (they used to be minGapless=1700 minChain=2000 minScore=2000)
     2.49s chain 1038534 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:23.41 chain 4436233 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
24 - Putting parameters back to minGapless=1700 minChain=2000 minScore=2000.
     Making maxExpand=1000 (used to be 3000)
     2.13s chain 1045151 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:34.25 chain 4664314 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
25 - Merging together blocks that are separated by gaps in same size in both
     coordinates and are less than 200 if this would improve score.
     2.14s chain 1060295 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:36.47 chain 4786170 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
26 - Reducing small double-sided gaps to single-sided gaps when it improves score.
     2.13s chain 1071282 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:34.66 chain 4866756 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
27 - Fixing off by one bug in reducing small double-sided gaps.  Allowing multiple 
     query sequences.
     2.16s chain 1076549 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:30.35 chain 4901457 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
28 - Reducing minExtend from 5000 to 3000.  Making diagnostic output a little more dense.
     2.18s chain 1076549 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:41.05 chain 4928421 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
29 - Making bandExt use just a single byte for each parent.
     1.71s chain 1076549 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:06.78 chain 4928421 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
30 - Refactoring bandExt to simplify data structure on scores.
     1.71s chain 1076549 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:08.87 chain 4928421 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
31 - Slight additional optimization of bandExt.
     1.69s chain 1076549 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:07.71 chain 4928421 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
32 - Expanding -maxBandGap from 55 to 100
     2.25s chain 1101160 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:48.89 chain 5243269 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
33 - Using regular rather than cheap gap score for initial chaining.
     2.21s chain 1083560 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:55.57 chain 4423825 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
34 - Using cheap scores again, but modifying them to be a bit more expensive.
     2.21s chain 1083643 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:56.57 chain 4892404 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
35 - Another tweak on cheap gap scores - small gaps cheaper, large gaps more expensive.
     2.20s chain 1088603 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:57.92 chain 4964764 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
36 - Upping maxDrop from 1000 to 1500
     2.34s chain 1090589 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:01.92 chain 5022055 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
37 - Extending from middle of highest-scoring 32-mer rather than middle.
     2.47s chain 1087854 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:03.84 chain 5024261 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
38 - Back to extending from middle. Moving minChain and minScore down to 1900.
     2.62s chain 1100798 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:21.65 chain 5048755 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
39 - Another variation of cheap gap scoring
     2.35s chain 1090589 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:01.94 chain 5041799 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
40 - Cheaper than original gap scoring at low end of double-sided gaps.
     2.41s chain 1103146 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:58:49 chain 5299359 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
41 - Variation of cheap gap scoring
     2.42s chain 1103146 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:51.64 chain 5297531 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
42 - More variation on cheap gap scoring
     2.36s chain 1098899 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:29.16 chain 5222194 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
43 - Yet more variation on cheap gap scoring
     2.34s chain 1098899 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:17.50 chain 5219170 human 2000000 + 361721 1949090 mouse 1120000 + 8735 1116315 1
44 - And yet more variation on cheap gap scoring
     2.36s chain 1098608 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:09.81 chain 5198126 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
45 - And still yet more variation on cheap gap scoring
     2.34s chain 1090574 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:05.12 chain 5108225 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
46 - Back to cheap gap scoring in 45 (which is simply 0.3 points/base).  Expanding
     maxExtend from 1000 to 1500.
     2.58s chain 1100733 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:13.59 chain 5253228 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
47 - Changing to indexing target instead of query.  Theoretically should have little effect
     2.75s chain 1100733 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:19.90 chain 5253228 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
48 - Making main index using (hopefully) quicker packing routine.
     2.74s chain 1100733 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:19.59 chain 5253228 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
49 - Reverting back to simpler (and only the tiniest bit slower) packing routines.
     (Note, measured total time in packing, and it's around 5% of total is all at any
     rate.)  Handling reverse strand.
     3.08s chain 1100733 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
           chain 2229 human2 100000 + 65689 65781 mouse17 75584 - 70282 70357 45
     2:25.27 chain 5253228 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
             chain 18144 human 2000000 + 1885616 1886805 mouse 1120000 - 50339 50840 1173
     I'm seeing a bug aligning zebrafish vs. human clock now though.
50 - Fixed bug (a qSize/tSize mixup).
     3.09s chain 1100733 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     2:24.06 chain 5253228 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
51 - Instead of making an index including transversions, when scanning for msps,
     hit smaller index repeatedly for each transversion in query.
     2.82s chain 1100733 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:57.35 chain 5253228 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
52 - Reducing msp score multiplying by entropy of matching bases.
     2.48s chain 1084911 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:09.35 chain 4921740 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
53 - Lowering minGapless to 1600 to compensate somewhat for entropy.
     2.59s chain 1092282 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:23.37 chain 5188612 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
54 - Tracing down memory leak in and around boxClump.  Making it so only one
     query sequence is loaded at a time (while retaining flexibility for query to
     be nib, 2bit, fa, or file of file names).
     2.59s chain 1092282 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:25.11 chain 5188612 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
55 - Rearranging so that there is only one sequence per index (but multiple
     indexes are allowed).  This is to reduce size of index in an easy way, since
     the particular sequence won't need to be stored with each hit.
     2.59 chain 1092282 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1.22.70 chain 5188612 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
56 - Compacting index so it uses 8 bytes per slot plus 4 bytes per word being
     indexed as opposed to 4 bytes per slot plus 8 bytes per word indexed.
     3.18 chain 1092282 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1.27.64 chain 5188612 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
57 - Starting on client/server version.
     3.11 chain 1092282 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1.27.48 chain 5188612 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
58 - Some more progress on client/server version. Still not there yet.
59 - Server is basically working.
60 - Adding subnet option to server for security purposes.
61 - Making server fork to service requests.
62 - Making server keep up to cpuCount processes going.
63 - Adding -multiHit flag.  It's on by default.
     2.84s chain 1075228 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:04.75 chain 3865117 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
64 - Putting in mod-int comb instead of rbTree.  This is a little sloppy.
     Perhaps a mod-hash would do better than the straignt mod-array.
     2.74s chain 1080692 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:37.79 chain 4770386 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
65 - Theoretically making mod-int comb a little more rigorous.  In practice??
     2.77s chain 1080692 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:38.49 chain 4769418 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
66 - Reverting to comb of 64.  Making -multiHit off by default.  What is responsible
     for the very mall drop in score vs. 57?
     3.04s chain 1092216 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:23.11 chain 5188372 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
67 - Putting back multiHits=1 as default.  Integrating multiHits into blatzSErver.
     A bit of debugging.  Initializing comb to -200 to avoid bogus double-hits
     initially.
     2.79s chain 1080692 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:38.34 chain 4731683 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
68 - Changing defaults to minGapless=2400 minChain=2500 
     2.60s chain 1002373 human2 100000 + 137 98887 mouse17 75584 + 100 73322 1
     0:24.34s chain 3015300 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
     blatzServer - time mouseRna21 vs chr21 1.16 chain 15467
     blatzServer - time mouseRna21 vs chr22 0.72 (no output) 
69 - Filtering out tiles overrepresented by 10x or more.  
     2.59s chain 1002373 human2 100000 + 137 98887 mouse17 75584 + 100 73322 1 
     0:24.11 chain 3015300 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
     blatzServer - time mouseRna21 vs chr21 1.02 chain 15467
     blatzServer - time mouseRna21 vs chr22 0.71 (no output)
70 - Filtering out tiles overrepresented by 5x or more.
     blatzServer - time mouseRna21 vs chr21 0.98 chain 15467
     blatzServer - time mouseRna21 vs chr22 0.70 (no output)
     2.60s chain 1002373 human2 100000 + 137 98887 mouse17 75584 + 100 73322 1 
     0:24.00 chain 3015300 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
71 - Moving back to index.c and gapless.c from v62.
     blatzServer - time mouseRna21 vs chr21 1.43 chain 15467
     blatzServer - time mouseRna21 vs chr22 1.01 (no output)
     2.67 chain 1002492 human2 100000 + 137 98887 mouse17 75584 + 100 73322 1
     0:39.34 chain 3182304 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
72 - Moving defaults to minGapless=1600 minChain=2000.  Theoretically should be back
     to v62.
     3.10 chain 1092282 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:27.57 chain 5188612 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
     blatzServer - time mouseRna21 vs chr21 1.94 chain 15467
     blatzServer - time mouseRna21 vs chr22 1.40 chain 2439 
73 - Analysing server timing on chr22 with mouseOneRna.fa:
     Just fetching DNA and returning empty chain:  0.04 to 0.27s
     Adding in stuff, but commenting out all of blatzScanForMsps: 0.05 to 0.20s.
     Adding in rbTree init/cleanup: 0.05 to 0.21s.
     Adding in blatzIndexKey: 0.05 to 0.20s.
     Added in tog loop (but not inner loop): 0.05 to 0.20s
     Added in inner loop (just counter): 0.15 to 0.37s
     Added in array dereference: 0.15 to 0.37s
     Added in inner loop up to rbTreeFind: 0.34 to 0.61s
     Added in call to rbTreeFind: 0.35 to 0.49s
     Added in call to gaplessExtendAndFilter: 0.92 to 1.17s
     Added in everything but putting MSP on list: 0.94 to 1.10s
     Put back to normal....
     Adding new type of double-hit processing using a circular buffer and
     doubly-linked lists:
     3.06 chain 1084861 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:12.03 chain 4883153 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
     blatzServer - time mouseRna21 vs chr21 1.45 chain 15467
     blatzServer - time mouseRna21 vs chr22 0.96 (no output)
74 - Fixing bug in double-hit code.
     2.90s chain 1080692 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:40.93 chain 4683534 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
      blatzServer - time mouseRna21 vs chr18 1.60 (verbose0) chain 2409
      blatzServer - time mouseRna21 vs chr21 0.98 chain 15467 
      blatzServer - time mouseRna21 vs chr22 0.67 chain 2439
     The chr18 timing on the laptop suggests a timing of 12 seconds on an
     intermediate server.  Trying to get this under 10.
     Parameters: minGapless=2200 -minChain=2400 -minScore=2500 -minExpand=3000 -maxBand=60
      blatzServer mouseRna21 vs chr18 1.36 estimated 10.05s
      1.8 chain 945910 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
      0:22.09 chain 2985563 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
     It's not clear that the loss in sensitivity is worth this modest speed gain.
     Sticking with -minGapless=1600 -minChain=2000 -minScore=2000 -maxBand=100
75 - Making chainBlocks fully reentrant.
     2.88 chain 1080692 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:40.75 chain 4683534 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
76 - Moving chainConnect, gapCalc, spacedSeed and dnaLoad to library.
     2.88 chain 1080692 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:41.81 chain 4683534 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
77 - Making it pay attention to multiHits option again, and making it off by default.
     3.12 chain 1092282 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     1:27.16 chain 5188612 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
78 - Multihits back on by default.  Changing gap costs to default to chicken.
     Note increase in score in this case does not necessarily reflect increase in
     quality.  In fact for the 'clock' set the score went from 27516 to 28981 on
     exactly the same alignment. Also enabling logDaemonize() call.
      2.95 chain 1299888 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
      0:42.13 chain 8185512 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
      blatzServer - time mouseRna21 vs chr18 1.62 chain 2624
      blatzServer - time mouseRna21 vs chr21 0.91 chain 33673
      blatzServer - time mouseRna21 vs chr22 0.70 chain 2439
     Here's the same data using the chicken matrix as well:
      3.80 chain 1486591 human2 100000 + 3 98912 mouse17 75584 + 3 73356 1
      2:29.97 chain 10589465 human 2000000 + 352790 1947822 mouse 1120000 + 119 1119888 1
      blatzServer - time mouseRna21 vs chr18 4.86 chain 9053
      blatzServer - time mouseRna21 vs chr21 2.03 chain 33024
     Considering the large increase in run-time I don't think I'll use this by default.
79 - Improving backup script.  Preparing to tinker on banded extender. 
80 - Using speed-tweaked band extender.
     2.71 chain 1299725 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:39.32 chain 8179312 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
      blatzServer - time mouseRna21 vs chr18 1.62 chain 2624
      blatzServer - time mouseRna21 vs chr21 0.88 chain 33673
81 - Adding outType option.  Currently is chain (default), psl, axt, or maf.
82 - Commenting and modularizing.
     2.72 chain 1299725 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0m39.495s chain 8179312 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
     Tested against 10m vs 10m alignment human/mouse:
     9:30.27 chain 96473 test/big/human10.nib 10000000 + 3652492 3653691 test/big/mouse10.nib 10000000 + 8457644 8458911 1
83 - Adding blast output.  Still has a few wrinkle to iron out.
84 - Debugging psl output.  Making outType work on server.
85 - Used to extend from one side of a gap, fill in much, and then extend from
     the other side just to the filled in area.  Now extend from both sides 
     equally. This improves the performance on RNA/DNA alignment in the same
     species very much, and is a modest improvement in score in general.  
     It does cost speed, but not during the scanning phase, which looks
     to be the real bottleneck in practice.
     3.48 1312099 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:41.80 chain 8334332 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
      blatzServer - time mouseRna21 vs chr18 1.59 chain 2624
      blatzServer - time mouseRna21 vs chr21 0.95 chain 34902
86 - Just extending 100 bases into filled in region as a speed compromise.
    0:40.73 chain 8290159 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
    3.30 chain 1311855 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
      blatzServer - time mouseRna21 vs chr18 1.59 2624
      blatzServer - time mouseRna21 vs chr21 0.87 34902
    Hmm.  This doesn't help speed a whole lot, and does cost some in score.  Will
    go back to 85.
87 - Bumping expandWindow from 10000 to 20000.
      3.59 chain 1312255 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
      0:58.37 chain 8364656 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
     Hmm, I'm not wild about the speed/sensitivity trade off here.  Will set back to 10000.
88 - Returned to #85.  Put copyright notices in code.
     3.45 1312099 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:42.29 chain 8334332 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
      blatzServer - time mouseRna21 vs chr18 1.59 chain 2624
      blatzServer - time mouseRna21 vs chr21 0.95 chain 34902
89 - Adding -rna option.  If present it will slide introns and trim polyA tails, and
     use intron-accommodating assymetric gap costs.
     3.56 chain 1312099 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:41.95 chain 8334332 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
90 - Comparing blastz vs. blat on mRNAs vs. chromosome 21.  Found a crash bug so
     swapping back in the bandExtender from v79
     3.89 chain 1315252 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:44.52 chain 8341322 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
91 - Changing removeExactOverlaps to removeSimpleOverlaps to get rid of partial dupe
     problem.
     3.79 chain 1310598 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
     0:44.29 chain 8325211 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
92 - Separating out blatzClient from blatzServer.
93 - Ported to Hgwdev:
      2.38 chain 1310598 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
      0:30.66 chain 8324871 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
      2:12 chr21 vs mouse rna. (112 mRNAs)
      11:42 chr1 + chr21 vs mouse rna.
      18:55 chr1 + chr2 + chr21 vs mouse rna.
     Ported to Kolossus:
      1:15 chr21 vs mouse rna
      6:51 chr1 + chr21 vs mouse rna
         match 194434 mismatch 49792 repMatch 4458
      40:03 chr?.nib + chr21 vs mouse rna.
     Kolossus -weight=12
      1:08 chr21 vs mouse rna
      4:43 chr1 + chr21 vs mouse rna
         match 193734 mismatch 49460 repMatch 4465
     Kolossus -weight=12 -minGapless=1800 -minChain=2100
      0:57 chr21 vs mouse rna
      3:31 chr1 + chr21 vs mouse rna
         match 193191 mismatch 49170 gapless 4435
     Kolossus -weight=12 -minGapless=2000 -minChain=2200
      0:52 chr21 vs mouse rna
      2:57 chr1 + chr21 vs mouse rna
         match 192351 mismatch 48776 repMatch 4425
           chr1 + chr2 + chr21 
      5:21 chr1 + chr2 + chr21 (2.3G RAM used) vs mouse rna
      7:08 chr1 + chr2 + chr3 + chr21 (3.1G RAM used)
      9:29 chr1 + chr2 + chr3 + chr4 + chr5 + chr21 (5.7G RAM)
     Kolossus -weight=13
      2:00 chr21 vs mouse rna
      6:00 chr1 + chr21 vs mouse rna
         Curiously slow.  Index falling out of cache?
	 match 192458 mismatch 48596 repMatch 4233
93 - Fixed bug in bandExt.
      2.26 chain 1310598 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
      0:28.38 chain 8324871 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
94 - Adding -transition flag.  By default it is 1, and the program works 
     as before.  Here's the results with it set to 0 on the 100k and meg
     test sets.
      1.46 chain 1186753 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
      0:10.94 chain 6411945 human 2000000 + 361822 1947371 mouse 1120000 + 8804 1116037 1
95 - Ported to Mac. Making it autolift from nib/2bit subranges in target.
      4.22 chain 1310598 human2 100000 + 27 98887 mouse17 75584 + 24 73322 1
      0:49.757 chain 8325211 human 2000000 + 361721 1947371 mouse 1120000 + 8735 1116037 1
96 - Doing autolift on target in server as well as standalone.  Doing autolift on
     query as well as target in standalone.
